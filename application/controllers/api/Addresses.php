<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');// This can be removed if you use __autoload() in config.php OR use Modular Extensions/** @noinspection PhpIncludeInspection */require APPPATH . '/libraries/REST_Controller.php';/** * Created by PhpStorm. * User: Manos * Date: 2/3/2016 * Time: 5:06 μμ * * @property Addresses_model $Addresses_model * @property Users_model $Users_model * @property Logged_users_model $Logged_users_model */class Addresses extends REST_Controller{    function __construct()    {        header("Access-Control-Allow-Origin: *");        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");        header("Access-Control-Allow-Headers: X-API-KEY, Origin, X-Requested-With, "            . "Content-Type, Accept, Access-Control-Request-Method");        if ("OPTIONS" === $_SERVER['REQUEST_METHOD'])            die();        // Construct the parent class        parent::__construct();        // Configure limits on our controller methods        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php        //$this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key        //$this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key        //$this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key    }    /**     * Inserts a new address.     */    public function insert_post()    {        if ((!$this->post('email') || !$this->post('street') || !$this->post('number') || !$this->post('area')            || !$this->post('tel_num') || !$this->post('zip_code') || !$this->post('token') || !$this->post('alias'))        ) {            $this->response([                'status' => FALSE,                'message' => 'You have not provided all the requested data!'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $this->load->model('Users_model');        $user_id = $this->Users_model->get_user_id_by_email($this->post('email'));        if (!$user_id) {            $this->response([                'status' => FALSE,                'message' => 'User not found'            ], REST_Controller::HTTP_FORBIDDEN);        }        $this->load->model('Logged_users_model');        $returned_token = $this->Logged_users_model->getToken($user_id);        if (!$returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Session not found.'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $token = $this->post('token');        // Check user token        if ($token != $returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Unauthorized action!'            ], REST_Controller::HTTP_UNAUTHORIZED);        }        // Check if zip code has anything other than digits        if ((is_numeric($this->post('zip_code')) === false)) {            $this->response([                'status' => FALSE,                'message' => 'Zip Code is invalid!'            ], REST_Controller::HTTP_BAD_REQUEST);        }        // Check if phone number has anything other than digits or is longer than 15 digits        if ((is_numeric($this->post('tel_num')) === false)            || strlen((string)$this->post('tel_num')) > 15        ) {            $this->response([                'status' => FALSE,                'message' => 'Phone number is invalid!'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $data = array();        $data['user_id'] = $user_id;        $data['street'] = $this->post('street');        $data['number'] = $this->post('number');        $data['area'] = $this->post('area');        $data['tel_num'] = $this->post('tel_num');        $data['zip_code'] = $this->post('zip_code');        $data['alias'] = $this->post('alias');        $this->load->model('Addresses_model');        $addedAddressId = $this->Addresses_model->insert_address($data);        if (!$addedAddressId) {            $this->response([                'status' => FALSE,                'message' => 'An error occurred.Please try again!'            ], REST_Controller::HTTP_BAD_REQUEST);        } else {            $this->response([                'status' => TRUE,                'message' => 'Address was successfully inserted!'            ], REST_Controller::HTTP_OK);        }    }    public function get_addresses_post()    {        if (!$this->post('email') || !$this->post('token')) {            $this->response([                'status' => FALSE,                'message' => 'You have not provided all the requested data!'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $this->load->model('Users_model');        $user_id = $this->Users_model->get_user_id_by_email($this->post('email'));        if (!$user_id) {            $this->response([                'status' => FALSE,                'message' => 'User not found'            ], REST_Controller::HTTP_FORBIDDEN);        }        $this->load->model('Logged_users_model');        $returned_token = $this->Logged_users_model->getToken($user_id);        if (!$returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Session not found.'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $token = $this->post('token');        // Check user's token        if ($token != $returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Unauthorized action!'            ], REST_Controller::HTTP_UNAUTHORIZED);        }        $this->load->model('Addresses_model');        $addresses = $this->Addresses_model->get_addresses($user_id);        if ($addresses)            $this->response([                'status' => TRUE,                'message' => 'Addresses returned.',                'data' => $addresses            ], REST_Controller::HTTP_OK);        else            $this->response([                'status' => FALSE,                'message' => 'Addresses not found.'            ], REST_Controller::HTTP_BAD_REQUEST);    }    public function edit_address_post()    {        if (!$this->post('email') || !$this->post('token') || !$this->post('data')) {            $this->response([                'status' => FALSE,                'message' => 'You have not provided all the requested data!'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $this->load->model('Users_model');        $user_id = $this->Users_model->get_user_id_by_email($this->post('email'));        if (!$user_id) {            $this->response([                'status' => FALSE,                'message' => 'User not found'            ], REST_Controller::HTTP_FORBIDDEN);        }        $this->load->model('Logged_users_model');        $returned_token = $this->Logged_users_model->getToken($user_id);        if (!$returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Session not found.'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $token = $this->post('token');        // Check user's token        if ($token != $returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Unauthorized action!'            ], REST_Controller::HTTP_UNAUTHORIZED);        }        $this->load->model('Addresses_model');        $edited = $this->Addresses_model->edit_address($this->post('data'), $user_id);        if ($edited)            $this->response([                'status' => TRUE,                'message' => 'Addresses was successfully edited.'            ], REST_Controller::HTTP_OK);        else            $this->response([                'status' => FALSE,                'message' => 'Addresses could not be edited.'            ], REST_Controller::HTTP_BAD_REQUEST);    }    public function delete_address_post()    {        if (!$this->post('email') || !$this->post('token') || !$this->post('id')) {            $this->response([                'status' => FALSE,                'message' => 'You have not provided all the requested data!'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $this->load->model('Users_model');        $user_id = $this->Users_model->get_user_id_by_email($this->post('email'));        if (!$user_id) {            $this->response([                'status' => FALSE,                'message' => 'User not found'            ], REST_Controller::HTTP_FORBIDDEN);        }        $this->load->model('Logged_users_model');        $returned_token = $this->Logged_users_model->getToken($user_id);        if (!$returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Session not found.'            ], REST_Controller::HTTP_BAD_REQUEST);        }        $token = $this->post('token');        // Check user's token        if ($token != $returned_token) {            $this->response([                'status' => FALSE,                'message' => 'Unauthorized action!'            ], REST_Controller::HTTP_UNAUTHORIZED);        }        $this->load->model('Addresses_model');        $deleted = $this->Addresses_model->delete_address_by_id($this->post('id'), $user_id);        if ($deleted)            $this->response([                'status' => TRUE,                'message' => 'Address was deleted.'            ], REST_Controller::HTTP_OK);        else            $this->response([                'status' => FALSE,                'message' => 'Address could not be deleted.'            ], REST_Controller::HTTP_BAD_REQUEST);    }}